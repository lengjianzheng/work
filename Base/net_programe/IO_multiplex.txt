int select(
int nfds,
fd_set* readfds,
fd_set* writefds,
fd_set* exceptfds,
const struct timeval* timeout
);

nfds：本参数忽略，仅起到兼容作用。
readfds：（可选）指针，指向一组等待可读性检查的套接口。
writefds：（可选）指针，指向一组等待可写性检查的套接口。
exceptfds：（可选）指针，指向一组等待错误检查的套接口。
timeout：select()最多等待时间。
struct timeval
{
time_t tv_sec; //second 秒
time_t tv_usec; //microsecond 微妙
};

FD_CLR(s,fd_set*set)：从集合set中删除描述字s。
FD_ISSET(s,fd_set*set)：若s为集合中一员，非零；否则为零。
FD_SET(s,fd_set*set)：向集合添加描述字s。
FD_ZERO(fd_set*set)：将set初始化为空集NULL。

select实现I/O多路复用过程：
1、将所有的描述符复制到内核。
2、将当前的进程添加到相应的等待队列中。同时设置回调函数，默认回调函数的操作就是唤醒进程。(也就是说当设备就绪，是调用回调函数，回调函数去唤醒进程)。
3、然后进入一个循环：
for(;;)
{
	遍历描述符集合
	if(有描述符就绪)
		break；
	睡眠，直到超时或有设备就绪
}
首先，遍历描述符集合是用f_op->poll函数遍历，该函数的返回值是一个掩码mask，也是通过这个掩码判断描述符是否就绪。
然后，这么看来对描述符的遍历起码要2次。
4、将3中返回的已就绪的描述符集合复制到应用缓冲区。

这样看来select的实现思想也就是将进程放在相应设备的等待队列中，当设备就绪时，通知进程，进程将相应的描述符返回。也没什么嘛。
select的缺点也都知道：1、描述符集合要复制到内核，然后将就绪的描述符从内核再复制到应用区；2、要多次遍历描述符集合；3、描述符集合的大小有限。
关键是select需要不断反复调用，而且描述符的集合有时会很大，所以select 的缺点会被放大
但是select是所有平台都实现了的机制，再者在描述符不多，而且比较活跃的情况下，select的效率很不错的。

poll的实现和select的实现差不多。

epoll的是为了克服select和poll的缺点设计的，实现也比较复杂。epoll首先内核会维护描述符集合，所以节省了内核和用户区之间文件描述符复制的开销，
而且内核不会多次遍历描述符集合，只是遍历已经就绪的描述符，最后，支持的描述符集合的大小更大。

如果大部分描述符是活跃状态，则epoll的效率可能不如select，poll。而且，epoll只是linux实现了，不具有移植性。





